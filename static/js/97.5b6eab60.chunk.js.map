{"version":3,"file":"static/js/97.5b6eab60.chunk.js","mappings":"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","sources":["services/validation/validationLoginSchema.js","components/LoginForm/LoginForm.jsx","page/LogIn/LogIn.styled.js","page/LogIn/LogIn.jsx"],"sourcesContent":["import * as yup from 'yup';\n\nexport const loginSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email('Please enter a valid email address')\n    .test('trim', 'The field must not start or end with spaces', value => {\n      if (value) {\n        return value.trim() === value;\n      }\n      return true;\n    })\n    .required('required field')\n    .max(30, 'the name must contain a maximum of 30 characters'),\n  password: yup\n    .string()\n    .test('trim', 'The field must not start or end with spaces', value => {\n      if (value) {\n        return value.trim() === value;\n      }\n      return true;\n    })\n    .required('required field')\n    .min(6, 'Password must contain at least 6 characters')\n    .max(12, 'Password must contain a maximum of 12 characters')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d|.*[!@#$%^&*()_+\\-=.<>])[a-zA-Z\\d!@#$%^&*()_+\\-=.<>]{6,12}$/,\n      'Password must contain at least one uppercase letter, one lowercase letter and one number'\n    ),\n});\n","import { useTranslation } from 'react-i18next';\nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { usePasswordToggle } from 'Hooks/usePasswordToggle';\nimport { logInThunk } from 'redux/registerReducers/registerThunks';\nimport { loginSchema } from 'services/validation/validationLoginSchema';\nimport { Logo } from 'components/Logo/Logo';\nimport { FormError } from 'components/FormError/FormError';\nimport { TogglePasswordIcon } from 'components/TogglePasswordVisibility/TogglePasswordVisibility';\nimport { LinkStyled } from 'components/RegisterForm/RegisterForm.styled';\nimport Button from 'components/Button/Button';\nimport {\n  EmailIcon,\n  FieldStyled,\n  FormStyled,\n  PasswordlIcon,\n  WrapperButton,\n  WrapperField,\n  WrapperForm,\n  WrapperIcon,\n  WrapperIcon2,\n  WrapperIcon3,\n} from './LoginForm.styled';\n\nexport const LoginForm = () => {\n  const { showPasswords, togglePasswordVisibility } = usePasswordToggle([\n    'password1',\n    'password2',\n  ]);\n  const dispatch = useDispatch();\n\n  const { t } = useTranslation();\n\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  const handleSubmit = (value, { resetForm }) => {\n    dispatch(logInThunk(value))\n      .unwrap()\n      .then(data => {\n        resetForm();\n        toast.success(\n          `${t('well done')}, ${data.user.username}! ${t('login')}`\n        );\n      })\n      .catch(error => {\n        toast.error(t('login error'));\n      });\n  };\n\n  return (\n    <WrapperForm>\n      <Logo />\n      <Formik\n        initialValues={initialValues}\n        validationSchema={loginSchema}\n        onSubmit={handleSubmit}\n      >\n        <FormStyled>\n          <WrapperField>\n            <WrapperIcon>\n              <FieldStyled\n                type=\"email\"\n                name=\"email\"\n                title={t('login title email')}\n                placeholder={t('email')}\n                autoComplete=\"off\"\n                required\n              />\n              <EmailIcon size={24} />\n            </WrapperIcon>\n            <FormError name=\"email\" />\n            <WrapperIcon3>\n              <WrapperIcon2>\n                <FieldStyled\n                  type={showPasswords.password1 ? 'text' : 'password'}\n                  name=\"password\"\n                  title={t('login title password')}\n                  placeholder={t('password')}\n                  autoComplete=\"off\"\n                  required\n                />\n                <PasswordlIcon />\n              </WrapperIcon2>\n              <TogglePasswordIcon\n                showPassword={showPasswords.password1}\n                onToggle={() => togglePasswordVisibility('password1')}\n              />\n            </WrapperIcon3>\n            <FormError name=\"password\" />\n          </WrapperField>\n          <WrapperButton>\n            <Button variant=\"primary\" type=\"submit\" text={t('login btn')} />\n          </WrapperButton>\n        </FormStyled>\n      </Formik>\n      <LinkStyled to=\"/register\">{t('register')}</LinkStyled>\n    </WrapperForm>\n  );\n};\n","import styled from 'styled-components';\nimport mobile from 'images/login-bg/bg-login-mobile.jpg';\nimport mobile2x from 'images/login-bg/bg-login-mobile@2x.jpg';\nimport tablet from 'images/login-bg/bg-login-tablet.jpg';\nimport tablet2x from 'images/login-bg/bg-login-tablet@2x.jpg';\nimport desctop from 'images/login-bg/bg-login-web.jpg';\nimport desctop2x from 'images/login-bg/bg-login-web@2x.jpg';\n\nexport const PublicPageContainer = styled.div`\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-position: center;\n  background-repeat: no-repeat;\n  background: #101010;\n\n  background-size: cover;\n  background-image: url(${mobile});\n\n  @media (min-device-pixel-ratio: 2),\n    (-webkit-min-device-pixel-ratio: 2),\n    (min-resolution: 192dpi),\n    (min-resolution: 2dppx) {\n    background-image: url(${mobile2x});\n  }\n\n  @media (min-width: 768px) {\n    background-image: url(${tablet});\n\n    @media (min-device-pixel-ratio: 2),\n      (-webkit-min-device-pixel-ratio: 2),\n      (min-resolution: 192dpi),\n      (min-resolution: 2dppx) {\n      background-image: url(${tablet2x});\n    }\n  }\n\n  @media (min-width: 1280px) {\n    background-image: url(${desctop});\n\n    @media (min-device-pixel-ratio: 2),\n      (-webkit-min-device-pixel-ratio: 2),\n      (min-resolution: 192dpi),\n      (min-resolution: 2dppx) {\n      background-image: url(${desctop2x});\n    }\n  }\n`;\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { PublicPageContainer } from './LogIn.styled';\n\nconst LogIn = () => {\n  return (\n    <PublicPageContainer>\n      <LoginForm />\n    </PublicPageContainer>\n  );\n};\n\nexport default LogIn;\n"],"names":["loginSchema","yup","shape","email","test","value","trim","required","max","password","min","matches","LoginForm","_usePasswordToggle","usePasswordToggle","showPasswords","togglePasswordVisibility","dispatch","useDispatch","t","useTranslation","_jsxs","WrapperForm","children","_jsx","Logo","Formik","initialValues","validationSchema","onSubmit","_ref","resetForm","logInThunk","unwrap","then","data","toast","success","concat","user","username","catch","error","FormStyled","WrapperField","WrapperIcon","FieldStyled","type","name","title","placeholder","autoComplete","EmailIcon","size","FormError","WrapperIcon3","WrapperIcon2","password1","PasswordlIcon","TogglePasswordIcon","showPassword","onToggle","WrapperButton","Button","variant","text","LinkStyled","to","PublicPageContainer","styled","div","_templateObject","_taggedTemplateLiteral","tablet","tablet2x","desctop","desctop2x"],"sourceRoot":""}