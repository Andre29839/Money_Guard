{"version":3,"file":"static/js/945.a8a0ed28.chunk.js","mappings":"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","sources":["redux/currencyRedusers/currencySelectors.js","components/Currency/Currency.styled.js","components/Currency/Currency.jsx","page/Currency/Currency.styled.js","page/Currency/Currency.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["export const currencySelector = state => state.currency.data;\n\nexport const isLoadingSelector = state => state.currency.isLoading;\n\nexport const selectCurrencyData = state => state.currency.data;\n\n","import styled from 'styled-components';\n\nexport const WrapperCurrency = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  width: 320px;\n  @media only screen and (min-width: 1280px) {\n    width: 480px;\n    margin-top: 32px;\n  }\n`;\n\nexport const StyledBox = styled.div`\n  width: 100%;\n  color: #fff;\n`;\n\nexport const StyledTable = styled.div`\n  max-height: 170px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n\n  @media only screen and (min-width: 1280px) {\n    align-items: stretch;\n  }\n`;\n\nexport const StyledThBox = styled.div`\n  padding: 16px 29px;\n  margin-bottom: 20px;\n  background: rgba(82, 59, 126, 0.6);\n\n  display: flex;\n  flex-direction: row;\n  gap: 37px;\n  align-items: center;\n\n  @media only screen and (min-width: 1280px) {\n    justify-content: center;\n    gap: 50px;\n  }\n`;\n\nexport const StyledTdBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  text-align: start;\n  gap: 45px;\n\n  @media only screen and (min-width: 1280px) {\n    margin: 0 auto;\n    gap: 50px;\n  }\n`;\n\nexport const StyledTBody = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  gap: 24px;\n  margin-bottom: 6px;\n\n  @media only screen and (min-width: 1280px) {\n    margin-bottom: 36px;\n  }\n`;\n\nexport const StyledTh = styled.span`\n  color: var(--white);\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: calc(16 / 24);\n  text-align: center;\n`;\n\nexport const StyledTd = styled.span`\n  display: inline-block;\n  color: var(--white);\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: calc(24 / 16);\n  text-align: center;\n  width: 62px;\n  &:last-child {\n    width: 42px;\n  }\n  &:first-child {\n    width: 65px;\n  }\n`;\n\nexport const StyledImg = styled.img`\n  display: inline-block;\n  width: 100%;\n`;\n","import { useTranslation } from 'react-i18next';\nimport { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { currencySelector } from 'redux/currencyRedusers/currencySelectors';\nimport { currencyThunk } from 'redux/currencyRedusers/currencyThunk';\nimport diagrame from 'images/chart/chart-tablet.png';\nimport {\n  StyledBox,\n  StyledImg,\n  StyledTBody,\n  StyledTable,\n  StyledTd,\n  StyledTdBox,\n  StyledTh,\n  StyledThBox,\n  WrapperCurrency,\n} from './Currency.styled';\n\nconst Currency = () => {\n  const [currency, setCurrency] = useState([]);\n  const dispatch = useDispatch();\n  const selectedCurrency = useSelector(currencySelector);\n  const token = useSelector(state => state.auth.token);\n\n  const { t } = useTranslation();\n\n  const updateLastUpdatedTime = () => {\n    const newTime = Date.now();\n    localStorage.setItem('lastUpdatedTime', newTime);\n  };\n\n  useEffect(() => {\n    if (!token) return;\n    const lastUpdatedTime = localStorage.getItem('lastUpdatedTime');\n\n    const isHourPassed = () => {\n      const oneHourUpdate = 60 * 60 * 1000;\n      return Date.now() - Number(lastUpdatedTime) >= oneHourUpdate;\n    };\n\n    if (isHourPassed() || !lastUpdatedTime) {\n      dispatch(currencyThunk());\n      setCurrency(selectedCurrency);\n      updateLastUpdatedTime();\n    } else {\n      setCurrency(selectedCurrency);\n    }\n  }, [dispatch, selectedCurrency, token]);\n\n  return (\n    <WrapperCurrency>\n      <StyledBox>\n        <StyledTable>\n          <StyledThBox>\n            <StyledTh>{t('currency')}</StyledTh>\n            <StyledTh>{t('purchase')}</StyledTh>\n            <StyledTh>{t('sale')}</StyledTh>\n          </StyledThBox>\n          <StyledTBody>\n            {currency?.length &&\n              currency.map(el => {\n                return (\n                  <StyledTdBox key={nanoid()}>\n                    <StyledTd>{el.currencyName}</StyledTd>\n                    <StyledTd>{parseFloat(el.rateBuy).toFixed(2)}</StyledTd>\n                    <StyledTd>{parseFloat(el.rateSell).toFixed(2)}</StyledTd>\n                  </StyledTdBox>\n                );\n              })}\n          </StyledTBody>\n        </StyledTable>\n        <StyledImg src={diagrame} alt=\"chart\" />\n      </StyledBox>\n    </WrapperCurrency>\n  );\n};\n\nexport default Currency;\n","import styled from 'styled-components';\n\nexport const StyledBox = styled.div`\n  max-width: 480px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n`;\n","import Currency from 'components/Currency/Currency';\nimport { StyledBox } from './Currency.styled';\n\nconst CurrencyPage = () => {\n  return (\n    <StyledBox>\n      <Currency />\n    </StyledBox>\n  );\n};\n\nexport default CurrencyPage;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["currencySelector","state","currency","data","WrapperCurrency","styled","div","_templateObject","_taggedTemplateLiteral","StyledBox","_templateObject2","StyledTable","_templateObject3","StyledThBox","_templateObject4","StyledTdBox","_templateObject5","StyledTBody","_templateObject6","StyledTh","span","_templateObject7","StyledTd","_templateObject8","StyledImg","img","_templateObject9","_useState","useState","_useState2","_slicedToArray","setCurrency","dispatch","useDispatch","selectedCurrency","useSelector","token","auth","t","useTranslation","useEffect","lastUpdatedTime","localStorage","getItem","Date","now","Number","currencyThunk","newTime","setItem","updateLastUpdatedTime","_jsx","children","_jsxs","length","map","el","currencyName","parseFloat","rateBuy","toFixed","rateSell","nanoid","src","diagrame","alt","Currency","size","arguments","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}