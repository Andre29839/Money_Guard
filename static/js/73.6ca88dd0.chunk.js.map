{"version":3,"file":"static/js/73.6ca88dd0.chunk.js","mappings":"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","sources":["services/validation/validationRegisterSchema.js","components/ConfirmPasswordIndicator/ConfirmPasswordIndicator.styled.js","components/ConfirmPasswordIndicator/ConfirmPasswordIndicator.jsx","components/IndicatorPasswordStrength/IndicatorPasswordStrength.styled.js","components/IndicatorPasswordStrength/IndicatorPasswordStrength.jsx","Hooks/usePasswordStrength.js","components/RegisterForm/RegisterForm.jsx","page/Register/Register.styled.js","page/Register/Register.jsx"],"sourcesContent":["import * as yup from 'yup';\n\nexport const registerSchema = t =>\n  yup.object().shape({\n    username: yup\n      .string()\n      .test('trim', t('The field must not start or end with spaces'), value => {\n        if (value) {\n          return value.trim() === value;\n        }\n        return true;\n      })\n      .required(t('required field'))\n      .min(2, t('Too Short!'))\n      .max(30, t('the name must contain a maximum of 30 characters')),\n    email: yup\n      .string()\n      .email(t('Please enter a valid email address'))\n      .test('trim', t('The field must not start or end with spaces'), value => {\n        if (value) {\n          return value.trim() === value;\n        }\n        return true;\n      })\n      .required(t('required field'))\n      .max(30, t('the name must contain a maximum of 30 characters')),\n    password: yup\n      .string()\n      .test('trim', t('The field must not start or end with spaces'), value => {\n        if (value) {\n          return value.trim() === value;\n        }\n        return true;\n      })\n      .required(t('required field'))\n      .min(6, t('Password must contain at least 6 characters'))\n      .max(12, t('Password must contain a maximum of 12 characters'))\n      .matches(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d|.*[!@#$%^&*()_+\\-=.<>])[a-zA-Z\\d!@#$%^&*()_+\\-=.<>]{6,12}$/,\n        t(\n          'Password must contain at least one uppercase letter, one lowercase letter and one number'\n        )\n      ),\n    confirmPassword: yup\n      .string()\n      .oneOf([yup.ref('password'), null], t('Passwords must match'))\n      .required(t('Confirm Password is required')),\n  });\n","import styled from 'styled-components';\n\nexport const IndicatorWrapper = styled.div`\n  height: 3px;\n  background-color: ${props => (props.$passwordsMatch ? 'green' : 'red')};\n  transition: all 0.4s ease-out;\n`;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { IndicatorWrapper } from './ConfirmPasswordIndicator.styled';\n\nexport const ConfirmPasswordIndicator = ({\n  passwordsMatch,\n  values: { confirmPassword },\n}) => {\n  const width = passwordsMatch ? '100%' : '50%';\n  return (\n    confirmPassword && (\n      <IndicatorWrapper $passwordsMatch={passwordsMatch} style={{ width }} />\n    )\n  );\n};\n\nConfirmPasswordIndicator.propTypes = {\n  passwordsMatch: PropTypes.bool.isRequired,\n};\n","import styled, { css, keyframes } from 'styled-components';\n\nconst passwordStrengthAnimation = keyframes`\n  from {\n    width: 0%;\n    background-color: transparent;\n  }\n  to {\n    width:100%;\n    background-color: ${props => props.color};\n  }\n`;\n\nexport const PasswordStrengthIndicator = styled.div`\n  width: 100%;\n  height: 3px;\n  background-color: transparent;\n  border-radius: 5px;\n  animation: ${passwordStrengthAnimation} 0.5s ease;\n  width: ${props => props.width};\n  background-color: ${props => props.color};\n  transition: all 0.4s ease-out;\n  ${props => css`\n    background-color: ${props.color};\n  `};\n`;\n\nexport const PasswordStrengthText = styled.p`\n  margin-top: 5px;\n  color: ${props => props.color};\n  font-size: 14px;\n  font-weight: bold;\n`;\n","import PropTypes from 'prop-types';\nimport { usePasswordStrength } from 'Hooks/usePasswordStrength';\nimport {\n  PasswordStrengthIndicator,\n  PasswordStrengthText,\n} from './IndicatorPasswordStrength.styled';\n\nexport const IndicatorPasswordStrength = ({ values }) => {\n  const {\n    getPasswordStrengthWidth,\n    getPasswordStrengthColor,\n    getPasswordStrengthText,\n  } = usePasswordStrength();\n\n  return (\n    <>\n      <PasswordStrengthIndicator\n        width={getPasswordStrengthWidth(values.password)}\n        color={getPasswordStrengthColor(values.password)}\n      />\n      <PasswordStrengthText color={getPasswordStrengthColor(values.password)}>\n        {getPasswordStrengthText(values.password)}\n      </PasswordStrengthText>\n    </>\n  );\n};\n\nIndicatorPasswordStrength.propTypes = {\n  values: PropTypes.shape({\n    password: PropTypes.string,\n  }).isRequired,\n};\n","import { useTranslation } from 'react-i18next';\n\nexport const usePasswordStrength = () => {\n  const { t } = useTranslation();\n  const getPasswordStrengthWidth = password => {\n    const maxLength = 10;\n    const passwordLength = password?.length || 0;\n    const strengthPercentage = (passwordLength / maxLength) * 100;\n    return `${Math.min(strengthPercentage, 100)}%`;\n  };\n\n  const getPasswordStrengthColor = password => {\n    const passwordStrengthRanges = [\n      { length: 1, color: '#FD450B' },\n      { length: 3, color: '#FF6231' },\n      { length: 4, color: '#F37952' },\n      { length: 5, color: '#FC675D' },\n      { length: 6, color: '#F6C881' },\n      { length: 7, color: '#FBEC67' },\n      { length: 8, color: '#F8E32B' },\n      { length: 9, color: '#CAF98F' },\n      { length: 10, color: '#52E54F' },\n      { length: Infinity, color: '#099E06' },\n    ];\n\n    const { color } = passwordStrengthRanges.find(\n      range => password?.length <= range.length\n    ) || {\n      color: 'transparent',\n    };\n    return color;\n  };\n\n  const getPasswordStrengthText = password => {\n    const passwordStrengthRanges = [\n      { min: 2, max: 6, text: t('Weak Password') },\n      { min: 7, max: 10, text: t('Medium Strength Password') },\n      { min: 11, max: Infinity, text: t('Strong Password') },\n    ];\n\n    const { text } = passwordStrengthRanges.find(\n      range => password?.length >= range.min && password?.length <= range.max\n    ) || { text: '' };\n\n    return text;\n  };\n\n  return {\n    getPasswordStrengthWidth,\n    getPasswordStrengthColor,\n    getPasswordStrengthText,\n  };\n};\n","import { useTranslation } from 'react-i18next';\nimport { toast } from 'react-toastify';\nimport { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\n\nimport { registerSchema } from 'services/validation/validationRegisterSchema';\nimport { usePasswordToggle } from 'Hooks/usePasswordToggle';\nimport { registerThunk } from 'redux/registerReducers/registerThunks';\n\nimport { FormError } from 'components/FormError/FormError';\nimport { Logo } from 'components/Logo/Logo';\nimport { TogglePasswordIcon } from 'components/TogglePasswordVisibility/TogglePasswordVisibility';\nimport { ConfirmPasswordIndicator } from 'components/ConfirmPasswordIndicator/ConfirmPasswordIndicator';\nimport Button from 'components/Button/Button';\nimport { IndicatorPasswordStrength } from 'components/IndicatorPasswordStrength/IndicatorPasswordStrength';\n\nimport {\n  LinkStyled,\n  NameRegisterIcon,\n  WrapperFormReg,\n} from './RegisterForm.styled';\nimport {\n  EmailIcon,\n  FieldStyled,\n  FormStyled,\n  PasswordlIcon,\n  WrapperButton,\n  WrapperField,\n  WrapperIcon,\n  WrapperIcon2,\n  WrapperIcon3,\n} from 'components/LoginForm/LoginForm.styled';\n\nexport const RegisterForm = () => {\n  const { showPasswords, togglePasswordVisibility } = usePasswordToggle([\n    'password1',\n    'password2',\n  ]);\n\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n\n  const initialValues = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n  };\n\n  const handleSubmit = (value, { resetForm }) => {\n    const { username, email, password } = value;\n    dispatch(registerThunk({ username, email, password }))\n      .unwrap()\n      .then(data => {\n        resetForm();\n        toast.success(`${t('Hi')}! ${data.user.username}, ${t('thanks')}!`);\n      })\n      .catch(error => {\n        toast.error(`${error}`);\n      });\n  };\n\n  return (\n    <WrapperFormReg>\n      <Logo />\n      <Formik\n        initialValues={initialValues}\n        validationSchema={registerSchema(t)}\n        onSubmit={handleSubmit}\n      >\n        {({ values, handleChange, handleBlur, touched, errors }) => (\n          <FormStyled autoComplete=\"off\">\n            <WrapperField>\n              <WrapperIcon>\n                <FieldStyled\n                  type=\"text\"\n                  name=\"username\"\n                  placeholder={t('First name')}\n                  autoComplete=\"off\"\n                  required\n                />\n                <NameRegisterIcon />\n              </WrapperIcon>\n              <FormError name=\"username\" touched={touched} errors={errors} />\n              <WrapperIcon>\n                <FieldStyled\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder={t('email')}\n                  autoComplete=\"off\"\n                  required\n                />\n                <EmailIcon size={24} />\n              </WrapperIcon>\n              <FormError name=\"email\" touched={touched} errors={errors} />\n\n              <WrapperIcon3>\n                <WrapperIcon2>\n                  <FieldStyled\n                    type={showPasswords.password1 ? 'text' : 'password'}\n                    name=\"password\"\n                    title={t(\n                      'Enter the password more difficult, letter, digit, capital letter.'\n                    )}\n                    placeholder={t('password')}\n                    required\n                    value={values.password}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    autoComplete=\"off\"\n                  />\n                  <PasswordlIcon />\n                </WrapperIcon2>\n                <TogglePasswordIcon\n                  showPassword={showPasswords.password1}\n                  onToggle={() => togglePasswordVisibility('password1')}\n                />\n              </WrapperIcon3>\n              <IndicatorPasswordStrength values={values} />\n              <FormError name=\"password\" touched={touched} errors={errors} />\n              <WrapperIcon3>\n                <WrapperIcon2>\n                  <FieldStyled\n                    type={showPasswords.password2 ? 'text' : 'password'}\n                    name=\"confirmPassword\"\n                    title={t(\n                      'Enter the password more difficult, letter, digit, capital letter.'\n                    )}\n                    placeholder={t('Confirm Password')}\n                    autoComplete=\"off\"\n                    required\n                  />\n                  <PasswordlIcon />\n                </WrapperIcon2>\n                <TogglePasswordIcon\n                  showPassword={showPasswords.password2}\n                  onToggle={() => togglePasswordVisibility('password2')}\n                />\n              </WrapperIcon3>\n              <ConfirmPasswordIndicator\n                values={values}\n                passwordsMatch={\n                  values.password === values.confirmPassword &&\n                  values.confirmPassword !== ''\n                }\n              />\n              <FormError name=\"confirmPassword\" />\n            </WrapperField>\n            <WrapperButton>\n              <Button type=\"submit\" text={t('register')} />\n            </WrapperButton>\n          </FormStyled>\n        )}\n      </Formik>\n      <LinkStyled to=\"/login\">{t('login btn')}</LinkStyled>\n    </WrapperFormReg>\n  );\n};\n","import styled from 'styled-components';\nimport mobile from 'images/register-bg/bg-register-mobile.jpg';\nimport mobile2x from 'images/register-bg/bg-register-mobile@2x.jpg';\nimport tablet from 'images/register-bg/bg-register-tablet.jpg';\nimport tablet2x from 'images/register-bg/bg-register-tablet@2x.jpg';\nimport desctop from 'images/register-bg/bg-register-desktop.jpg';\nimport desctop2x from 'images/register-bg/bg-register-desktop@2x.jpg';\n\nexport const PublicPageContainer = styled.div`\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-position: center;\n  background-repeat: no-repeat;\n\n  background-size: cover;\n  background-image: url(${mobile});\n\n  @media (min-device-pixel-ratio: 2),\n    (-webkit-min-device-pixel-ratio: 2),\n    (min-resolution: 192dpi),\n    (min-resolution: 2dppx) {\n    background-image: url(${mobile2x});\n  }\n\n  @media (min-width: 768px) {\n    background-image: url(${tablet});\n\n    @media (min-device-pixel-ratio: 2),\n      (-webkit-min-device-pixel-ratio: 2),\n      (min-resolution: 192dpi),\n      (min-resolution: 2dppx) {\n      background-image: url(${tablet2x});\n    }\n  }\n\n  @media (min-width: 1280px) {\n    background-image: url(${desctop});\n\n    @media (min-device-pixel-ratio: 2),\n      (-webkit-min-device-pixel-ratio: 2),\n      (min-resolution: 192dpi),\n      (min-resolution: 2dppx) {\n      background-image: url(${desctop2x});\n    }\n  }\n`;\n\nexport const PublicPageBox = styled.div`\n  max-height: 100%;\n  overflow-y: auto;\n`;\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { PublicPageContainer } from './Register.styled';\n\nconst RegisterPage = () => {\n  return (\n    <PublicPageContainer>\n      <RegisterForm />\n    </PublicPageContainer>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["registerSchema","t","yup","shape","username","test","value","trim","required","min","max","email","password","matches","confirmPassword","oneOf","IndicatorWrapper","styled","div","_templateObject","_taggedTemplateLiteral","props","$passwordsMatch","ConfirmPasswordIndicator","_ref","passwordsMatch","width","values","_jsx","style","passwordStrengthAnimation","keyframes","color","PasswordStrengthIndicator","_templateObject2","css","_templateObject3","PasswordStrengthText","p","_templateObject4","IndicatorPasswordStrength","_usePasswordStrength","useTranslation","getPasswordStrengthWidth","strengthPercentage","length","concat","Math","getPasswordStrengthColor","Infinity","find","range","getPasswordStrengthText","text","usePasswordStrength","_jsxs","_Fragment","children","RegisterForm","_usePasswordToggle","usePasswordToggle","showPasswords","togglePasswordVisibility","dispatch","useDispatch","WrapperFormReg","Logo","Formik","initialValues","validationSchema","onSubmit","resetForm","registerThunk","unwrap","then","data","toast","success","user","catch","error","_ref2","handleChange","handleBlur","touched","errors","FormStyled","autoComplete","WrapperField","WrapperIcon","FieldStyled","type","name","placeholder","NameRegisterIcon","FormError","EmailIcon","size","WrapperIcon3","WrapperIcon2","password1","title","onChange","onBlur","PasswordlIcon","TogglePasswordIcon","showPassword","onToggle","password2","WrapperButton","Button","LinkStyled","to","PublicPageContainer","mobile2x","tablet","tablet2x","desctop","desctop2x"],"sourceRoot":""}